{"version":3,"sources":["../src/actions/index.ts","../src/constants.ts","../src/utils/apiClient.ts","../src/actions/getWorkloadTypes.ts","../src/actions/getUserProfile.ts","../src/actions/getUserBalance.ts","../src/actions/listWorkloads.ts","../src/utils/validation.ts","../src/actions/launchWorkload.ts","../src/actions/stopWorkload.ts","../src/types/index.ts","../src/index.ts"],"names":["logger","dotenv","composePrompt","formatRecentMessages","ModelType","parseJSONObjectFromText"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Actions for Comput3AI plugin\n * \n * This file exports all action handlers for the plugin.\n */\n\n// Export actions\nexport { getWorkloadTypesAction } from './getWorkloadTypes';\nexport { getUserProfileAction } from './getUserProfile';\nexport { getUserBalanceAction } from './getUserBalance';\nexport { listWorkloadsAction } from './listWorkloads';\nexport { launchWorkloadAction } from './launchWorkload';\nexport { stopWorkloadAction } from './stopWorkload'; ","/**\n * Constants and configuration for the Comput3AI plugin\n * \n * This file contains all API endpoints, configuration values, and error messages.\n */\n\n/**\n * API configuration\n */\nexport const API_CONFIG = {\n  /**\n   * Base URL for the Comput3AI API\n   */\n  BASE_URL: 'https://api.comput3.ai/api/v0',\n  \n  /**\n   * Timeout in milliseconds for API requests\n   */\n  TIMEOUT: 30000, // 30 seconds\n  \n  /**\n   * Required environment variables for the plugin\n   */\n  REQUIRED_ENV_VARS: ['COMPUT3AI_API_KEY', 'COMPUT3AI_WALLET_ADDRESS'],\n  \n  /**\n   * API key header name\n   */\n  API_KEY_HEADER: 'X-C3-API-KEY',\n};\n\n/**\n * API endpoints\n */\nexport const ENDPOINTS = {\n  /**\n   * Get available workload types\n   * GET /api/v0/types\n   */\n  TYPES: '/types',\n  \n  /**\n   * Get user balance\n   * GET /api/v0/balance\n   */\n  BALANCE: '/balance',\n  \n  /**\n   * Get user profile\n   * GET /api/v0/profile\n   */\n  PROFILE: '/profile',\n  \n  /**\n   * Launch a workload\n   * POST /api/v0/launch\n   */\n  LAUNCH: '/launch',\n  \n  /**\n   * Stop a workload\n   * POST /api/v0/stop\n   */\n  STOP: '/stop',\n  \n  /**\n   * List workloads\n   * POST /api/v0/workloads\n   */\n  WORKLOADS: '/workloads',\n};\n\n/**\n * Error messages\n */\nexport const ERROR_MESSAGES = {\n  /**\n   * Missing API key error\n   */\n  MISSING_API_KEY: 'Comput3AI API key is required but not provided',\n  \n  /**\n   * Invalid workload ID error\n   */\n  INVALID_WORKLOAD_ID: 'Invalid workload ID provided',\n  \n  /**\n   * Network error\n   */\n  NETWORK_ERROR: 'Network error occurred while connecting to the Comput3AI API',\n  \n  /**\n   * Unknown error\n   */\n  UNKNOWN_ERROR: 'An unknown error occurred',\n  \n  /**\n   * Invalid workload type\n   */\n  INVALID_WORKLOAD_TYPE: 'Invalid workload type provided',\n}; ","/**\n * API client for Comput3AI\n * \n * This utility handles all API communication with proper error handling and logging.\n */\nimport axios from 'axios';\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { logger } from '@elizaos/core';\nimport type { IAgentRuntime } from '@elizaos/core';\nimport type { \n  ApiResponse,\n  UserBalance, \n  UserProfile, \n  WorkloadType,\n  LaunchWorkloadRequest,\n  LaunchWorkloadResponse,\n  StopWorkloadRequest,\n  StopWorkloadResponse,\n  ListWorkloadsRequest,\n  WorkloadItem\n} from '../types';\nimport { API_CONFIG, ENDPOINTS, ERROR_MESSAGES } from '../constants';\n\n/**\n * Comput3AI API client class\n * \n * Handles API calls with proper error handling, logging, and response typing\n */\nexport class Comput3ApiClient {\n  private readonly baseURL: string;\n  private readonly apiKey: string;\n  \n  /**\n   * Creates a new Comput3AI API client\n   * \n   * @param baseURL - Base URL for the API\n   * @param apiKey - API key for authentication\n   */\n  constructor(baseURL: string, apiKey: string) {\n    this.baseURL = baseURL;\n    this.apiKey = apiKey;\n    \n    logger.debug(`Comput3ApiClient initialized with base URL: ${baseURL}`);\n  }\n  \n  /**\n   * Creates an API client instance from runtime environment settings\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @returns A configured API client instance\n   */\n  static fromRuntime(runtime: IAgentRuntime): Comput3ApiClient {\n    const baseURL = API_CONFIG.BASE_URL;\n    const apiKey = runtime.getSetting('COMPUT3AI_API_KEY') || process.env.COMPUT3AI_API_KEY || '';\n    \n    if (!apiKey) {\n      logger.error(ERROR_MESSAGES.MISSING_API_KEY);\n      throw new Error(ERROR_MESSAGES.MISSING_API_KEY);\n    }\n    \n    return new Comput3ApiClient(baseURL, apiKey);\n  }\n  \n  /**\n   * Makes a GET request to the API\n   * \n   * @param endpoint - API endpoint to call\n   * @param params - Query parameters for the request\n   * @returns Typed API response\n   */\n  async get<T>(\n    endpoint: string,\n    params?: Record<string, unknown>\n  ): Promise<ApiResponse<T>> {\n    logger.debug(`Comput3API GET request to ${endpoint}`, params);\n    \n    try {\n      const response = await this.request<T>({\n        method: 'GET',\n        url: endpoint,\n        params,\n      });\n      \n      logger.debug(`Comput3API GET response from ${endpoint}`, response.data);\n      \n      return {\n        success: true,\n        data: response.data,\n        statusCode: response.status,\n      };\n    } catch (error) {\n      return this.handleError<T>(error, endpoint);\n    }\n  }\n  \n  /**\n   * Makes a POST request to the API\n   * \n   * @param endpoint - API endpoint to call\n   * @param data - Request body\n   * @returns Typed API response\n   */\n  async post<T>(\n    endpoint: string,\n    data?: unknown\n  ): Promise<ApiResponse<T>> {\n    logger.debug(`Comput3API POST request to ${endpoint}`, data);\n    \n    try {\n      const response = await this.request<T>({\n        method: 'POST',\n        url: endpoint,\n        data,\n      });\n      \n      logger.debug(`Comput3API POST response from ${endpoint}`, response.data);\n      \n      return {\n        success: true,\n        data: response.data,\n        statusCode: response.status,\n      };\n    } catch (error) {\n      return this.handleError<T>(error, endpoint);\n    }\n  }\n  \n  /**\n   * Gets available workload types\n   * \n   * @returns List of available workload types\n   */\n  async getWorkloadTypes(): Promise<ApiResponse<WorkloadType[]>> {\n    return this.get<WorkloadType[]>(ENDPOINTS.TYPES);\n  }\n  \n  /**\n   * Gets user balance\n   * \n   * @returns User balance information\n   */\n  async getUserBalance(): Promise<ApiResponse<UserBalance>> {\n    return this.get<UserBalance>(ENDPOINTS.BALANCE);\n  }\n  \n  /**\n   * Gets user profile\n   * \n   * @returns User profile information\n   */\n  async getUserProfile(): Promise<ApiResponse<UserProfile>> {\n    return this.get<UserProfile>(ENDPOINTS.PROFILE);\n  }\n  \n  /**\n   * Launches a new workload\n   * \n   * @param request - Launch workload request parameters\n   * @returns Launch workload response\n   */\n  async launchWorkload(request: LaunchWorkloadRequest): Promise<ApiResponse<LaunchWorkloadResponse>> {\n    return this.post<LaunchWorkloadResponse>(ENDPOINTS.LAUNCH, request);\n  }\n  \n  /**\n   * Stops a running workload\n   * \n   * @param request - Stop workload request parameters\n   * @returns Stop workload response\n   */\n  async stopWorkload(request: StopWorkloadRequest): Promise<ApiResponse<StopWorkloadResponse>> {\n    return this.post<StopWorkloadResponse>(ENDPOINTS.STOP, request);\n  }\n  \n  /**\n   * Lists user workloads\n   * \n   * @param request - List workloads request parameters\n   * @returns List of workload items\n   */\n  async listWorkloads(request?: ListWorkloadsRequest): Promise<ApiResponse<WorkloadItem[]>> {\n    return this.post<WorkloadItem[]>(ENDPOINTS.WORKLOADS, request || { running: true });\n  }\n  \n  /**\n   * Makes a request with appropriate headers and configuration\n   * \n   * @param config - Axios request configuration\n   * @returns Axios response\n   * @private\n   */\n  private async request<T>(\n    config: AxiosRequestConfig\n  ): Promise<AxiosResponse<T>> {\n    const axiosInstance = axios.create({\n      baseURL: this.baseURL,\n      timeout: API_CONFIG.TIMEOUT,\n      headers: {\n        [API_CONFIG.API_KEY_HEADER]: this.apiKey,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n    });\n    \n    return axiosInstance.request<T>(config);\n  }\n  \n  /**\n   * Handles API errors consistently\n   * \n   * @param error - Error object\n   * @param endpoint - API endpoint that was called\n   * @returns Error response\n   * @private\n   */\n  private handleError<T>(error: unknown, endpoint: string): ApiResponse<T> {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error;\n      \n      logger.error(`Comput3API Error for ${endpoint}: ${axiosError.message}`);\n      \n      if (axiosError.response) {\n        // Server responded with an error status\n        const responseData = axiosError.response.data as Record<string, unknown>;\n        logger.debug('Error response data:', responseData);\n        \n        return {\n          success: false,\n          error: responseData.message as string || axiosError.message,\n          statusCode: axiosError.response.status,\n        };\n      }\n      \n      if (axiosError.request) {\n        // Request was made but no response received\n        logger.error('No response received from Comput3AI API');\n        \n        return {\n          success: false,\n          error: ERROR_MESSAGES.NETWORK_ERROR,\n          statusCode: 0,\n        };\n      }\n    }\n    \n    // Generic error handling\n    const errorMessage = error instanceof Error ? error.message : ERROR_MESSAGES.UNKNOWN_ERROR;\n    logger.error(`Unexpected Comput3AI API error: ${errorMessage}`);\n    \n    return {\n      success: false,\n      error: errorMessage,\n    };\n  }\n}\n\n/**\n * Creates an API client from runtime environment\n * \n * @param runtime - ElizaOS agent runtime\n * @returns Configured API client\n */\nexport function createComput3ApiClient(runtime: IAgentRuntime): Comput3ApiClient {\n  return Comput3ApiClient.fromRuntime(runtime);\n} ","/**\n * Get Workload Types Action\n * \n * This action retrieves the available workload types from the Comput3AI API.\n */\nimport {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n} from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\nimport { createComput3ApiClient } from \"../utils/apiClient\";\nimport type { WorkloadType } from \"../types\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Action to retrieve available workload types from Comput3AI API\n */\nexport const getWorkloadTypesAction: Action = {\n  /**\n   * Action identifier\n   */\n  name: \"GET_WORKLOAD_TYPES\",\n  \n  /**\n   * Alternative action names\n   */\n  similes: [\n    \"LIST_WORKLOAD_TYPES\",\n    \"GET_COMPUT3_TYPES\",\n    \"LIST_COMPUT3_TYPES\",\n    \"SHOW_WORKLOAD_TYPES\",\n  ],\n  \n  /**\n   * Validate action prerequisites\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @returns Whether the action can be executed\n   */\n  validate: async (runtime: IAgentRuntime, _message: Memory): Promise<boolean> => {\n    logger.debug(\"Validating GET_WORKLOAD_TYPES action\");\n    \n    const apiKey = runtime.getSetting(\"COMPUT3AI_API_KEY\") || process.env.COMPUT3AI_API_KEY;\n    \n    if (!apiKey) {\n      logger.error(\"GET_WORKLOAD_TYPES validation failed: Missing API key\");\n      return false;\n    }\n    \n    logger.debug(\"GET_WORKLOAD_TYPES validation successful\");\n    return true;\n  },\n  \n  /**\n   * Human-readable description of the action\n   */\n  description: \"Retrieves available GPU workload types from Comput3AI\",\n  \n  /**\n   * Main action handler\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @param state - Agent state\n   * @param options - Additional options\n   * @param callback - Callback for sending response\n   * @returns Success status\n   */\n  handler: async (\n    runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State,\n    _options: Record<string, unknown>,\n    callback: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing GET_WORKLOAD_TYPES action\");\n    \n    try {\n      // Create API client\n      logger.debug(\"Creating Comput3AI API client\");\n      const apiClient = createComput3ApiClient(runtime);\n      \n      // Fetch workload types\n      logger.debug(\"Fetching workload types from Comput3AI API\");\n      const response = await apiClient.getWorkloadTypes();\n      \n      // Check for success\n      if (!response.success || !response.data) {\n        const errorMessage = response.error || \"Failed to retrieve workload types\";\n        logger.error(`GET_WORKLOAD_TYPES failed: ${errorMessage}`);\n        \n        callback({\n          text: `Failed to retrieve workload types: ${errorMessage}`,\n          content: { \n            success: false, \n            error: errorMessage \n          },\n        });\n        \n        return false;\n      }\n      \n      // Process successful response\n      const workloadTypes = response.data;\n      logger.info(`Retrieved ${workloadTypes.length} workload types`);\n      logger.debug(\"Workload types:\", workloadTypes);\n      \n      // Format user-friendly response\n      const formattedTypes = formatWorkloadTypes(workloadTypes);\n      \n      callback({\n        text: `Available workload types: ${formattedTypes}`,\n        content: { \n          success: true, \n          data: workloadTypes \n        },\n      });\n      \n      return true;\n    } catch (error) {\n      // Handle unexpected errors\n      const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n      logger.error(`GET_WORKLOAD_TYPES error: ${errorMessage}`);\n      \n      if (error instanceof Error && error.stack) {\n        logger.debug(`Error stack: ${error.stack}`);\n      }\n      \n      callback({\n        text: `Failed to retrieve workload types: ${errorMessage}`,\n        content: { \n          success: false, \n          error: errorMessage \n        },\n      });\n      \n      return false;\n    }\n  },\n  \n  /**\n   * Example conversations for action usage\n   */\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"What workload types are available on Comput3?\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Let me check the available workload types...\",\n          actions: [\"GET_WORKLOAD_TYPES\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Show me the GPU workload options I can launch\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Here are the available GPU workload types...\",\n          actions: [\"GET_WORKLOAD_TYPES\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n\n/**\n * Format workload types into a readable string\n * \n * @param types - List of workload types\n * @returns Formatted string\n */\nfunction formatWorkloadTypes(types: WorkloadType[]): string {\n  if (types.length === 0) {\n    return \"No workload types available\";\n  }\n  \n  return types.map(type => `'${type}'`).join(\", \");\n} ","/**\n * Get User Profile Action\n * \n * This action retrieves the user profile information from the Comput3AI API.\n */\nimport {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n} from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\nimport { createComput3ApiClient } from \"../utils/apiClient\";\nimport type { UserProfile } from \"../types\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Action to retrieve user profile information from Comput3AI API\n */\nexport const getUserProfileAction: Action = {\n  /**\n   * Action identifier\n   */\n  name: \"GET_USER_PROFILE\",\n  \n  /**\n   * Alternative action names\n   */\n  similes: [\n    \"SHOW_USER_PROFILE\",\n    \"GET_COMPUT3_PROFILE\",\n    \"DISPLAY_USER_PROFILE\",\n    \"MY_COMPUT3_PROFILE\",\n  ],\n  \n  /**\n   * Validate action prerequisites\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @returns Whether the action can be executed\n   */\n  validate: async (runtime: IAgentRuntime, _message: Memory): Promise<boolean> => {\n    logger.debug(\"Validating GET_USER_PROFILE action\");\n    \n    const apiKey = runtime.getSetting(\"COMPUT3AI_API_KEY\") || process.env.COMPUT3AI_API_KEY;\n    \n    if (!apiKey) {\n      logger.error(\"GET_USER_PROFILE validation failed: Missing API key\");\n      return false;\n    }\n    \n    logger.debug(\"GET_USER_PROFILE validation successful\");\n    return true;\n  },\n  \n  /**\n   * Human-readable description of the action\n   */\n  description: \"Retrieves user profile information from Comput3AI\",\n  \n  /**\n   * Main action handler\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @param state - Agent state\n   * @param options - Additional options\n   * @param callback - Callback for sending response\n   * @returns Success status\n   */\n  handler: async (\n    runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State,\n    _options: Record<string, unknown>,\n    callback: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing GET_USER_PROFILE action\");\n    \n    try {\n      // Create API client\n      logger.debug(\"Creating Comput3AI API client\");\n      const apiClient = createComput3ApiClient(runtime);\n      \n      // Fetch user profile\n      logger.debug(\"Fetching user profile from Comput3AI API\");\n      const response = await apiClient.getUserProfile();\n      \n      // Check for success\n      if (!response.success || !response.data) {\n        const errorMessage = response.error || \"Failed to retrieve user profile\";\n        logger.error(`GET_USER_PROFILE failed: ${errorMessage}`);\n        \n        callback({\n          text: `Failed to retrieve user profile: ${errorMessage}`,\n          content: { \n            success: false, \n            error: errorMessage \n          },\n        });\n        \n        return false;\n      }\n      \n      // Process successful response\n      const profile = response.data;\n      logger.info(\"Retrieved user profile\");\n      logger.debug(\"User profile:\", profile);\n      \n      // Format user-friendly response\n      const formattedProfile = formatUserProfile(profile);\n      \n      callback({\n        text: formattedProfile,\n        content: { \n          success: true, \n          data: profile \n        },\n      });\n      \n      return true;\n    } catch (error) {\n      // Handle unexpected errors\n      const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n      logger.error(`GET_USER_PROFILE error: ${errorMessage}`);\n      \n      if (error instanceof Error && error.stack) {\n        logger.debug(`Error stack: ${error.stack}`);\n      }\n      \n      callback({\n        text: `Failed to retrieve user profile: ${errorMessage}`,\n        content: { \n          success: false, \n          error: errorMessage \n        },\n      });\n      \n      return false;\n    }\n  },\n  \n  /**\n   * Example conversations for action usage\n   */\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"What's my Comput3 profile?\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Let me check your Comput3AI profile information...\",\n          actions: [\"GET_USER_PROFILE\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Show me my Comput3AI user profile\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Here's your Comput3AI profile information...\",\n          actions: [\"GET_USER_PROFILE\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n\n/**\n * Format user profile into a readable string\n * \n * @param profile - User profile object\n * @returns Formatted string\n */\nfunction formatUserProfile(profile: UserProfile): string {\n  const lines = [\n    \"User Profile Information:\",\n    `Wallet Address: ${profile.addr}`,\n    `User UUID: ${profile.user_uuid}`,\n  ];\n  \n  if (profile.tags && profile.tags.length > 0) {\n    lines.push(`Tags: ${profile.tags.join(\", \")}`);\n  } else {\n    lines.push(\"Tags: None\");\n  }\n  \n  return lines.join(\"\\n\");\n} ","/**\n * Get User Balance Action\n * \n * This action retrieves the user's balance information from the Comput3AI API.\n */\nimport {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n} from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\nimport { createComput3ApiClient } from \"../utils/apiClient\";\nimport type { UserBalance } from \"../types\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Action to retrieve user balance information from Comput3AI API\n */\nexport const getUserBalanceAction: Action = {\n  /**\n   * Action identifier\n   */\n  name: \"GET_USER_BALANCE\",\n  \n  /**\n   * Alternative action names\n   */\n  similes: [\n    \"SHOW_USER_BALANCE\",\n    \"CHECK_BALANCE\",\n    \"GET_COMPUT3_BALANCE\",\n    \"DISPLAY_USER_BALANCE\",\n    \"MY_COMPUT3_BALANCE\",\n  ],\n  \n  /**\n   * Validate action prerequisites\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @returns Whether the action can be executed\n   */\n  validate: async (runtime: IAgentRuntime, _message: Memory): Promise<boolean> => {\n    logger.debug(\"Validating GET_USER_BALANCE action\");\n    \n    const apiKey = runtime.getSetting(\"COMPUT3AI_API_KEY\") || process.env.COMPUT3AI_API_KEY;\n    \n    if (!apiKey) {\n      logger.error(\"GET_USER_BALANCE validation failed: Missing API key\");\n      return false;\n    }\n    \n    logger.debug(\"GET_USER_BALANCE validation successful\");\n    return true;\n  },\n  \n  /**\n   * Human-readable description of the action\n   */\n  description: \"Retrieves user balance information from Comput3AI\",\n  \n  /**\n   * Main action handler\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @param state - Agent state\n   * @param options - Additional options\n   * @param callback - Callback for sending response\n   * @returns Success status\n   */\n  handler: async (\n    runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State,\n    _options: Record<string, unknown>,\n    callback: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing GET_USER_BALANCE action\");\n    \n    try {\n      // Create API client\n      logger.debug(\"Creating Comput3AI API client\");\n      const apiClient = createComput3ApiClient(runtime);\n      \n      // Fetch user balance\n      logger.debug(\"Fetching user balance from Comput3AI API\");\n      const response = await apiClient.getUserBalance();\n      \n      // Check for success\n      if (!response.success || !response.data) {\n        const errorMessage = response.error || \"Failed to retrieve user balance\";\n        logger.error(`GET_USER_BALANCE failed: ${errorMessage}`);\n        \n        callback({\n          text: `Failed to retrieve user balance: ${errorMessage}`,\n          content: { \n            success: false, \n            error: errorMessage \n          },\n        });\n        \n        return false;\n      }\n      \n      // Process successful response\n      const balance = response.data;\n      logger.info(\"Retrieved user balance\");\n      logger.debug(\"User balance:\", balance);\n      \n      // Format user-friendly response\n      const formattedBalance = formatUserBalance(balance);\n      \n      callback({\n        text: formattedBalance,\n        content: { \n          success: true, \n          data: balance \n        },\n      });\n      \n      return true;\n    } catch (error) {\n      // Handle unexpected errors\n      const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n      logger.error(`GET_USER_BALANCE error: ${errorMessage}`);\n      \n      if (error instanceof Error && error.stack) {\n        logger.debug(`Error stack: ${error.stack}`);\n      }\n      \n      callback({\n        text: `Failed to retrieve user balance: ${errorMessage}`,\n        content: { \n          success: false, \n          error: errorMessage \n        },\n      });\n      \n      return false;\n    }\n  },\n  \n  /**\n   * Example conversations for action usage\n   */\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"What's my current balance on Comput3?\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Let me check your Comput3AI balance...\",\n          actions: [\"GET_USER_BALANCE\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"How many tokens do I have in my Comput3AI account?\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Let me check your current token balance...\",\n          actions: [\"GET_USER_BALANCE\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n\n/**\n * Format user balance into a readable string\n * \n * @param balance - User balance object\n * @returns Formatted string\n */\nfunction formatUserBalance(balance: UserBalance): string {\n  return `Your current Comput3AI balance is: ${balance.balance} tokens`;\n} ","/**\n * List Workloads Action\n * \n * This action retrieves a list of user workloads from the Comput3AI API.\n */\nimport {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n} from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\nimport { createComput3ApiClient } from \"../utils/apiClient\";\nimport type { WorkloadItem, ListWorkloadsRequest } from \"../types\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Action to retrieve a list of user workloads from Comput3AI API\n */\nexport const listWorkloadsAction: Action = {\n  /**\n   * Action identifier\n   */\n  name: \"LIST_WORKLOADS\",\n  \n  /**\n   * Alternative action names\n   */\n  similes: [\n    \"GET_WORKLOADS\",\n    \"SHOW_WORKLOADS\",\n    \"LIST_MY_WORKLOADS\",\n    \"DISPLAY_WORKLOADS\",\n    \"SHOW_MY_WORKLOADS\",\n  ],\n  \n  /**\n   * Validate action prerequisites\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @returns Whether the action can be executed\n   */\n  validate: async (runtime: IAgentRuntime, _message: Memory): Promise<boolean> => {\n    logger.debug(\"Validating LIST_WORKLOADS action\");\n    \n    const apiKey = runtime.getSetting(\"COMPUT3AI_API_KEY\") || process.env.COMPUT3AI_API_KEY;\n    \n    if (!apiKey) {\n      logger.error(\"LIST_WORKLOADS validation failed: Missing API key\");\n      return false;\n    }\n    \n    logger.debug(\"LIST_WORKLOADS validation successful\");\n    return true;\n  },\n  \n  /**\n   * Human-readable description of the action\n   */\n  description: \"Retrieves a list of user workloads from Comput3AI\",\n  \n  /**\n   * Main action handler\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @param state - Agent state\n   * @param options - Additional options\n   * @param callback - Callback for sending response\n   * @returns Success status\n   */\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: Record<string, unknown>,\n    callback: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing LIST_WORKLOADS action\");\n    \n    try {\n      // Create API client\n      logger.debug(\"Creating Comput3AI API client\");\n      const apiClient = createComput3ApiClient(runtime);\n      \n      // Determine if we should filter for running workloads only\n      const messageText = message.content?.text as string || \"\";\n      const showOnlyRunning = messageText.toLowerCase().includes(\"running\");\n      logger.debug(`Filtering for running workloads only: ${showOnlyRunning}`);\n      \n      const requestOptions: ListWorkloadsRequest = {\n        running: showOnlyRunning || undefined,\n      };\n      \n      // Fetch workloads list\n      logger.debug(\"Fetching workloads list from Comput3AI API\", requestOptions);\n      const response = await apiClient.listWorkloads(requestOptions);\n      \n      // Check for success\n      if (!response.success || !response.data) {\n        const errorMessage = response.error || \"Failed to retrieve workloads\";\n        logger.error(`LIST_WORKLOADS failed: ${errorMessage}`);\n        \n        callback({\n          text: `Failed to retrieve workloads: ${errorMessage}`,\n          content: { \n            success: false, \n            error: errorMessage \n          },\n        });\n        \n        return false;\n      }\n      \n      // Process successful response\n      const workloads = response.data;\n      logger.info(`Retrieved ${workloads.length} workloads`);\n      logger.debug(\"Workloads:\", workloads);\n      \n      // Format user-friendly response\n      const formattedWorkloads = formatWorkloadsList(workloads, showOnlyRunning);\n      \n      callback({\n        text: formattedWorkloads,\n        content: { \n          success: true, \n          data: workloads \n        },\n      });\n      \n      return true;\n    } catch (error) {\n      // Handle unexpected errors\n      const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n      logger.error(`LIST_WORKLOADS error: ${errorMessage}`);\n      \n      if (error instanceof Error && error.stack) {\n        logger.debug(`Error stack: ${error.stack}`);\n      }\n      \n      callback({\n        text: `Failed to retrieve workloads: ${errorMessage}`,\n        content: { \n          success: false, \n          error: errorMessage \n        },\n      });\n      \n      return false;\n    }\n  },\n  \n  /**\n   * Example conversations for action usage\n   */\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"List all my Comput3 workloads\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Here are your Comput3AI workloads...\",\n          actions: [\"LIST_WORKLOADS\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Show me my running workloads on Comput3AI\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Let me fetch your running workloads...\",\n          actions: [\"LIST_WORKLOADS\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n\n/**\n * Format workloads list into a readable string\n * \n * @param workloads - Array of workload items\n * @param showOnlyRunning - Whether only running workloads were requested\n * @returns Formatted string\n */\nfunction formatWorkloadsList(workloads: WorkloadItem[], showOnlyRunning: boolean): string {\n  if (workloads.length === 0) {\n    return `No ${showOnlyRunning ? 'running ' : ''}workloads found.`;\n  }\n  \n  const header = `Found ${workloads.length} ${showOnlyRunning ? 'running ' : ''}workload${workloads.length > 1 ? 's' : ''}:`;\n  \n  const workloadLines = workloads.map((workload) => {\n    const createdDate = new Date(workload.created * 1000).toLocaleString();\n    const expiresDate = new Date(workload.expires * 1000).toLocaleString();\n    \n    return [\n      `\\n• Workload: ${workload.workload}`,\n      `  Type: ${workload.type}`,\n      `  Status: ${workload.status}`,\n      `  Node: ${workload.node}`,\n      `  Running: ${workload.running ? 'Yes' : 'No'}`,\n      `  Created: ${createdDate}`,\n      `  Expires: ${expiresDate}`,\n    ].join('\\n');\n  });\n  \n  return `${header}${workloadLines.join('\\n')}`;\n} ","/**\n * Validation Utilities for Comput3AI Plugin\n * \n * This file contains helper functions for validating and extracting information from user messages.\n */\nimport { logger } from \"@elizaos/core\";\nimport type { WorkloadType } from \"../types\";\n\n/**\n * Known workload types with regex patterns to match them in natural language\n */\nexport const WORKLOAD_TYPE_PATTERNS: Record<WorkloadType, RegExp[]> = {\n  \"media:fast\": [\n    /media:fast/i,\n    /media fast/i,\n    /fast media/i,\n    /media.*fast/i,\n  ],\n  \"ollama_webui:coder\": [\n    /ollama_webui:coder/i,\n    /ollama webui:coder/i,\n    /ollama webui coder/i,\n    /ollama.*coder/i,\n    /coder workload/i,\n    /coding workload/i,\n    /workload.*coding/i,\n    /workload.*code/i,\n  ],\n  \"ollama_webui:fast\": [\n    /ollama_webui:fast/i,\n    /ollama webui:fast/i,\n    /ollama webui fast/i,\n    /ollama.*fast/i,\n    /ollama fast/i,\n    /fast ollama/i,\n  ],\n  \"ollama_webui:large\": [\n    /ollama_webui:large/i,\n    /ollama webui:large/i,\n    /ollama webui large/i,\n    /ollama.*large/i,\n    /large ollama/i,\n    /ollama large/i,\n  ],\n  \"llama_webui:coder\": [\n    /llama_webui:coder/i,\n    /llama webui:coder/i, \n    /llama webui coder/i,\n    /llama.*coder/i,\n    /llama coder/i,\n  ],\n};\n\n/**\n * Enhanced prompt template for extracting launch workload parameters\n * Includes specific examples and mentions of known workload types\n */\nexport const ENHANCED_LAUNCH_WORKLOAD_TEMPLATE = `Analyze the most recent user message to extract information about launching a GPU workload on Comput3AI. \nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample responses:\n\\`\\`\\`json\n{\n   \"type\": \"ollama_webui:coder\",\n   \"expires\": 10\n}\n\\`\\`\\`\n\n\\`\\`\\`json\n{\n   \"type\": \"media:fast\",\n   \"expires\": 30\n}\n\\`\\`\\`\n\n\\`\\`\\`json\n{\n   \"type\": \"llama_webui:coder\",\n   \"expires\": 15\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the following information about the requested workload launch:\n- Workload type: Must be exactly one of these strings: \"media:fast\", \"ollama_webui:coder\", \"ollama_webui:fast\", \"ollama_webui:large\", \"llama_webui:coder\"\n- Expiration time in minutes (default to 10 if not specified) - this will be converted to a Unix timestamp later\n\nIf the workload type is unclear, try to infer from context (e.g., \"coding\" -> \"ollama_webui:coder\", \"fast media\" -> \"media:fast\").\n`;\n\n/**\n * Enhanced prompt template for extracting stop workload parameters\n * Includes specific examples focusing on extracting workload IDs, including UUIDs and domain formats\n */\nexport const ENHANCED_STOP_WORKLOAD_TEMPLATE = `Analyze the most recent user message to extract information about stopping a GPU workload on Comput3AI.\nRespond with a JSON markdown block containing only the extracted values.\n\nExample responses:\n\\`\\`\\`json\n{\n   \"workload\": \"7b69314d-c88d-47d9-920c-ae827f6b7844\"\n}\n\\`\\`\\`\n\n\\`\\`\\`json\n{\n   \"workload\": \"firmly-widely-proud-gpu.comput3.ai\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the following information about the requested workload to stop:\n- Workload ID to stop (can be either in UUID format like \"7b69314d-c88d-47d9-920c-ae827f6b7844\" or domain format like \"something-something-something-gpu.comput3.ai\")\n\nLook for either UUID format strings (8-4-4-4-12 format) or strings ending in \".comput3.ai\" or any identifier that appears to be a workload ID.\n`;\n\n/**\n * Extract workload type from text using pattern matching\n * \n * @param text - Text to analyze\n * @returns Extracted workload type or null if not found\n */\nexport function extractWorkloadType(text: string): WorkloadType | null {\n  if (!text) return null;\n  \n  // Direct match for exact workload type\n  for (const [type, patterns] of Object.entries(WORKLOAD_TYPE_PATTERNS)) {\n    for (const pattern of patterns) {\n      if (pattern.test(text)) {\n        logger.debug(`Matched workload type '${type}' using pattern ${pattern}`);\n        return type as WorkloadType;\n      }\n    }\n  }\n  \n  // Context-based inference for less specific mentions\n  if (text.match(/coder|coding|code|developer|development/i)) {\n    logger.debug(\"Inferred 'ollama_webui:coder' from context\");\n    return \"ollama_webui:coder\";\n  }\n  \n  if (text.match(/media|video|audio|streaming/i)) {\n    logger.debug(\"Inferred 'media:fast' from context\");\n    return \"media:fast\";\n  }\n  \n  if (text.match(/large|big|powerful/i)) {\n    logger.debug(\"Inferred 'ollama_webui:large' from context\");\n    return \"ollama_webui:large\";\n  }\n  \n  if (text.match(/fast|quick|speed/i)) {\n    logger.debug(\"Inferred 'ollama_webui:fast' from context\");\n    return \"ollama_webui:fast\";\n  }\n  \n  return null;\n}\n\n/**\n * Extract expiration time in minutes from text\n * \n * @param text - Text to analyze\n * @param defaultMinutes - Default minutes to use if not specified\n * @returns Extracted expiration time in minutes (NOT converted to timestamp)\n */\nexport function extractExpirationTime(text: string, defaultMinutes = 10): number {\n  if (!text) return defaultMinutes;\n  \n  // Match patterns like \"expires in X minutes\", \"for X minutes\", \"X min\", etc.\n  const expirationPatterns = [\n    /expires? in (\\d+)\\s*min(ute)?s?/i,\n    /for (\\d+)\\s*min(ute)?s?/i,\n    /(\\d+)\\s*min(ute)?s? expir/i,\n    /(\\d+)\\s*min(ute)?s?/i,\n    /(\\d+)\\s*hours?/i,\n  ];\n  \n  for (const pattern of expirationPatterns) {\n    const match = text.match(pattern);\n    if (match?.[1]) {\n      const value = Number.parseInt(match[1], 10);\n      \n      // Convert hours to minutes if needed\n      if (pattern.toString().includes(\"hours\")) {\n        const minutes = value * 60;\n        logger.debug(`Extracted expiration time: ${value} hours = ${minutes} minutes`);\n        return minutes;\n      }\n      \n      logger.debug(`Extracted expiration time: ${value} minutes`);\n      return value;\n    }\n  }\n  \n  logger.debug(`No expiration time found, using default: ${defaultMinutes} minutes`);\n  return defaultMinutes;\n}\n\n/**\n * Extract workload ID from text\n * \n * @param text - Text to analyze\n * @returns Extracted workload ID or null if not found\n */\nexport function extractWorkloadId(text: string): string | null {\n  if (!text) return null;\n  \n  // Match patterns for typical Comput3 workload IDs\n  \n  // First try to extract UUIDs (e.g., 7b69314d-c88d-47d9-920c-ae827f6b7844)\n  const uuidPattern = /([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/i;\n  const uuidMatch = text.match(uuidPattern);\n  if (uuidMatch?.[1]) {\n    logger.debug(`Extracted workload ID from UUID pattern: ${uuidMatch[1]}`);\n    return uuidMatch[1];\n  }\n  \n  // Next try to extract strings ending with .comput3.ai\n  const comput3DomainPattern = /([a-zA-Z0-9-]+\\.comput3\\.ai)/i;\n  const domainMatch = text.match(comput3DomainPattern);\n  if (domainMatch?.[1]) {\n    logger.debug(`Extracted workload ID from domain pattern: ${domainMatch[1]}`);\n    return domainMatch[1];\n  }\n  \n  // Look for workload ID patterns (hyphenated strings or wrk_ prefixed IDs)\n  const workloadPatterns = [\n    /wrk_([a-zA-Z0-9]+)/i,\n    /workload[:\\s]+([a-zA-Z0-9-_]+)/i,\n    /([a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+)/i,\n  ];\n  \n  for (const pattern of workloadPatterns) {\n    const match = text.match(pattern);\n    if (match?.[1]) {\n      logger.debug(`Extracted workload ID: ${match[1]}`);\n      return pattern.toString().includes(\"wrk_\") ? `wrk_${match[1]}` : match[1];\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Enhanced validation for launch workload content\n * \n * @param text - User message text\n * @returns Validated launch parameters or null if invalid\n */\nexport function validateLaunchWorkloadFromText(text: string): { type: WorkloadType; expires: number } | null {\n  const type = extractWorkloadType(text);\n  \n  if (!type) {\n    logger.debug(\"Failed to extract valid workload type from text\");\n    return null;\n  }\n  \n  const expires = extractExpirationTime(text);\n  \n  return { type, expires };\n}\n\n/**\n * Enhanced validation for stop workload content\n * \n * @param text - User message text\n * @returns Validated stop parameters or null if invalid\n */\nexport function validateStopWorkloadFromText(text: string): { workload: string } | null {\n  const workload = extractWorkloadId(text);\n  \n  if (!workload) {\n    logger.debug(\"Failed to extract valid workload ID from text\");\n    return null;\n  }\n  \n  return { workload };\n}\n","/**\n * Launch Workload Action\n * \n * This action launches a new workload on the Comput3AI platform.\n */\nimport {\n  type Action,\n  type ActionExample,\n  type Content,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  ModelType,\n  composePrompt,\n  logger,\n  parseJSONObjectFromText,\n} from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\nimport { createComput3ApiClient } from \"../utils/apiClient\";\nimport type { LaunchWorkloadRequest, LaunchWorkloadResponse, WorkloadType } from \"../types\";\nimport { ERROR_MESSAGES } from \"../constants\";\nimport { ENHANCED_LAUNCH_WORKLOAD_TEMPLATE, validateLaunchWorkloadFromText } from \"../utils/validation\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Interface for launch workload content extracted from user message\n */\ninterface LaunchWorkloadContent extends Content {\n  type: WorkloadType;\n  expires?: number;\n}\n\n/**\n * Validates if the content is valid for launching a workload\n * \n * @param content - Content to validate\n * @returns Whether the content is valid\n */\nfunction isLaunchWorkloadContent(content: LaunchWorkloadContent): boolean {\n  logger.debug(\"Validating launch workload content:\", content);\n  \n  if (!content.type || typeof content.type !== 'string') {\n    logger.debug(\"Invalid content: Missing or invalid workload type\");\n    return false;\n  }\n  \n  if (content.expires !== undefined && typeof content.expires !== 'number') {\n    logger.debug(\"Invalid content: Expires must be a number if provided\");\n    return false;\n  }\n  \n  return true;\n}\n\n/**\n * Template for extracting launch workload parameters from user messages\n */\nconst launchWorkloadTemplate = ENHANCED_LAUNCH_WORKLOAD_TEMPLATE;\n\n/**\n * Action to launch a new workload on Comput3AI\n */\nexport const launchWorkloadAction: Action = {\n  /**\n   * Action identifier\n   */\n  name: \"LAUNCH_WORKLOAD\",\n  \n  /**\n   * Alternative action names\n   */\n  similes: [\n    \"START_WORKLOAD\",\n    \"CREATE_WORKLOAD\",\n    \"LAUNCH_GPU\",\n    \"START_GPU\",\n    \"CREATE_GPU_WORKLOAD\",\n  ],\n  \n  /**\n   * Validate action prerequisites\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @returns Whether the action can be executed\n   */\n  validate: async (runtime: IAgentRuntime, _message: Memory): Promise<boolean> => {\n    logger.debug(\"Validating LAUNCH_WORKLOAD action\");\n    \n    const apiKey = runtime.getSetting(\"COMPUT3AI_API_KEY\") || process.env.COMPUT3AI_API_KEY;\n    \n    if (!apiKey) {\n      logger.error(\"LAUNCH_WORKLOAD validation failed: Missing API key\");\n      return false;\n    }\n    \n    logger.debug(\"LAUNCH_WORKLOAD validation successful\");\n    return true;\n  },\n  \n  /**\n   * Human-readable description of the action\n   */\n  description: \"Launches a new GPU workload on Comput3AI\",\n  \n  /**\n   * Main action handler\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @param state - State object\n   * @param options - Additional options\n   * @param callback - Callback for sending response\n   * @returns Success status\n   */\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: Record<string, unknown>,\n    callback: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing LAUNCH_WORKLOAD action\");\n    \n    try {\n      // Create API client\n      logger.debug(\"Creating Comput3AI API client\");\n      const apiClient = createComput3ApiClient(runtime);\n      \n      // Extract launch parameters from message\n      logger.debug(\"Extracting launch parameters from message\");\n      let launchParams: LaunchWorkloadContent;\n      \n      if (message.content && 'type' in message.content) {\n        // Parameters were directly provided in structured content\n        launchParams = message.content as LaunchWorkloadContent;\n      } else {\n        // Need to extract parameters from text\n        const prompt = composePrompt({\n          template: launchWorkloadTemplate,\n          state: { recentMessages: formatRecentMessages(state) },\n        });\n        \n        logger.debug(\"Extracting workload parameters using LLM\");\n        const result = await runtime.useModel(ModelType.TEXT_SMALL, {\n          prompt,\n        });\n        \n        launchParams = parseJSONObjectFromText(result) as LaunchWorkloadContent;\n        \n        // If LLM parsing failed, try direct text extraction\n        if (!isLaunchWorkloadContent(launchParams) && message.content && typeof message.content.text === 'string') {\n          logger.debug(\"LLM parsing failed, trying direct text extraction\");\n          const extractedParams = validateLaunchWorkloadFromText(message.content.text);\n          \n          if (extractedParams) {\n            logger.debug(\"Direct text extraction successful:\", extractedParams);\n            launchParams = extractedParams;\n          }\n        }\n      }\n      \n      // Validate parameters\n      if (!isLaunchWorkloadContent(launchParams)) {\n        const errorMessage = ERROR_MESSAGES.INVALID_WORKLOAD_TYPE;\n        logger.error(`LAUNCH_WORKLOAD failed: ${errorMessage}`);\n        \n        callback({\n          text: `Failed to launch workload: ${errorMessage}. Please specify a valid workload type.`,\n          content: { \n            success: false, \n            error: errorMessage \n          },\n        });\n        \n        return false;\n      }\n      \n      // Set default expiration if not provided\n      if (launchParams.expires === undefined) {\n        launchParams.expires = 10; // Default 10 minutes\n      }\n      \n      // Prepare launch request\n      const request: LaunchWorkloadRequest = {\n        type: launchParams.type,\n        expires: Math.floor(Date.now() / 1000) + (launchParams.expires * 60), // Convert minutes to Unix timestamp\n      };\n      \n      // Add detailed logging\n      logger.debug(\"Launching workload with parameters:\", request);\n      logger.debug(\"Request JSON body:\", JSON.stringify(request, null, 2));\n      logger.debug(\"Requested workload type:\", request.type);\n      logger.debug(\"Requested expiration minutes:\", request.expires);\n      logger.debug(\"About to make API call to launch workload\");\n      \n      // Launch workload\n      const response = await apiClient.launchWorkload(request);\n      \n      // Log API response\n      logger.debug(\"API call completed with response:\", response);\n      \n      // Check for success\n      if (!response.success || !response.data) {\n        const errorMessage = response.error || \"Failed to launch workload\";\n        logger.error(`LAUNCH_WORKLOAD failed: ${errorMessage}`);\n        logger.debug(\"Full error response:\", JSON.stringify(response, null, 2));\n        \n        let userMessage = `Failed to launch workload: ${errorMessage}`;\n        \n        // Add more helpful context for 502 errors\n        if (response.statusCode === 502) {\n          userMessage = 'Failed to launch workload: Server error (502 Bad Gateway). The Comput3AI service is currently experiencing issues. Please try again later or contact Comput3AI support if the problem persists.';\n        }\n        \n        callback({\n          text: userMessage,\n          content: { \n            success: false, \n            error: errorMessage,\n            statusCode: response.statusCode\n          },\n        });\n        \n        return false;\n      }\n      \n      // Process successful response\n      const launchResponse = response.data;\n      logger.info(\"Successfully launched workload\");\n      logger.debug(\"Launch response:\", launchResponse);\n      \n      // Format user-friendly response\n      const formattedResponse = formatLaunchResponse(launchResponse, request, launchParams.expires);\n      \n      callback({\n        text: formattedResponse,\n        content: { \n          success: true, \n          data: launchResponse,\n          request: request,\n        },\n      });\n      \n      return true;\n    } catch (error) {\n      // Handle unexpected errors\n      const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n      logger.error(`LAUNCH_WORKLOAD error: ${errorMessage}`);\n      \n      if (error instanceof Error && error.stack) {\n        logger.debug(`Error stack: ${error.stack}`);\n      }\n      \n      // Try to log more details about the error\n      if (typeof error === 'object' && error !== null) {\n        try {\n          logger.debug(\"Error details:\", JSON.stringify(error, Object.getOwnPropertyNames(error), 2));\n        } catch (e) {\n          logger.debug(\"Could not stringify full error object\");\n        }\n      }\n\n      // Check for 502 errors in the catch block too\n      let userMessage = `Failed to launch workload: ${errorMessage}`;\n      if (errorMessage.includes(\"502\") || errorMessage.includes(\"Bad Gateway\")) {\n        userMessage = 'Failed to launch workload: Server error (502 Bad Gateway). The Comput3AI service is currently experiencing issues. Please try again later or contact Comput3AI support if the problem persists.';\n      }\n      \n      callback({\n        text: userMessage,\n        content: { \n          success: false, \n          error: errorMessage \n        },\n      });\n      \n      return false;\n    }\n  },\n  \n  /**\n   * Example conversations for action usage\n   */\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Launch a new GPU workload of type media:fast that expires in 10 minutes\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Launching a new workload...\",\n          actions: [\"LAUNCH_WORKLOAD\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Start a llama_webui:coder workload that expires in 30 minutes\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Creating a new workload for you...\",\n          actions: [\"LAUNCH_WORKLOAD\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n\n/**\n * Format recent messages for context in the LLM prompt\n * \n * @param state - State object containing messages\n * @returns Formatted messages string\n */\nfunction formatRecentMessages(state: State): string {\n  const messages = state.messages || [];\n  return messages.slice(-3).map((msg: { role?: string; content: string | { text: string } }) => {\n    if (typeof msg.content === 'string') {\n      return `${msg.role || 'user'}: ${msg.content}`;\n    }\n    if (msg.content && typeof msg.content.text === 'string') {\n      return `${msg.role || 'user'}: ${msg.content.text}`;\n    }\n    return '';\n  }).join('\\n\\n');\n}\n\n/**\n * Format launch response into a user-friendly message\n * \n * @param response - Launch response from API\n * @param request - Original launch request\n * @param expiresMinutes - Original expiration time in minutes\n * @returns Formatted response message\n */\nfunction formatLaunchResponse(response: LaunchWorkloadResponse, request: LaunchWorkloadRequest, expiresMinutes: number): string {\n  const expiryTime = new Date();\n  expiryTime.setMinutes(expiryTime.getMinutes() + expiresMinutes);\n  \n  return [\n    `Successfully launched a new ${request.type} workload!`,\n    \"\",\n    `Workload ID: ${response.workload}`,\n    `Workload Key: ${response.workload_key}`,\n    `Node: ${response.node}`,\n    `Type: ${request.type}`,\n    `Expires: in ${expiresMinutes} minutes (${expiryTime.toLocaleString()})`,\n  ].join('\\n');\n} ","/**\n * Stop Workload Action\n * \n * This action stops a running workload on the Comput3AI platform.\n */\nimport {\n  type Action,\n  type ActionExample,\n  type Content,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  ModelType,\n  composePrompt,\n  logger,\n  parseJSONObjectFromText,\n} from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\nimport { createComput3ApiClient } from \"../utils/apiClient\";\nimport type { StopWorkloadRequest, StopWorkloadResponse } from \"../types\";\nimport { ERROR_MESSAGES } from \"../constants\";\nimport { ENHANCED_STOP_WORKLOAD_TEMPLATE, validateStopWorkloadFromText } from \"../utils/validation\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Interface for stop workload content extracted from user message\n */\ninterface StopWorkloadContent extends Content {\n  workload: string;\n}\n\n/**\n * Validates if the content is valid for stopping a workload\n * \n * @param content - Content to validate\n * @returns Whether the content is valid\n */\nfunction isStopWorkloadContent(content: StopWorkloadContent): boolean {\n  logger.debug(\"Validating stop workload content:\", content);\n  \n  if (!content.workload || typeof content.workload !== 'string') {\n    logger.debug(\"Invalid content: Missing or invalid workload ID\");\n    return false;\n  }\n  \n  return true;\n}\n\n/**\n * Template for extracting stop workload parameters from user messages\n */\nconst stopWorkloadTemplate = ENHANCED_STOP_WORKLOAD_TEMPLATE;\n\n/**\n * Action to stop a running workload on Comput3AI\n */\nexport const stopWorkloadAction: Action = {\n  /**\n   * Action identifier\n   */\n  name: \"STOP_WORKLOAD\",\n  \n  /**\n   * Alternative action names\n   */\n  similes: [\n    \"TERMINATE_WORKLOAD\",\n    \"END_WORKLOAD\",\n    \"SHUTDOWN_WORKLOAD\",\n    \"STOP_GPU\",\n    \"TERMINATE_GPU\",\n  ],\n  \n  /**\n   * Validate action prerequisites\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @returns Whether the action can be executed\n   */\n  validate: async (runtime: IAgentRuntime, _message: Memory): Promise<boolean> => {\n    logger.debug(\"Validating STOP_WORKLOAD action\");\n    \n    const apiKey = runtime.getSetting(\"COMPUT3AI_API_KEY\") || process.env.COMPUT3AI_API_KEY;\n    \n    if (!apiKey) {\n      logger.error(\"STOP_WORKLOAD validation failed: Missing API key\");\n      return false;\n    }\n    \n    logger.debug(\"STOP_WORKLOAD validation successful\");\n    return true;\n  },\n  \n  /**\n   * Human-readable description of the action\n   */\n  description: \"Stops a running GPU workload on Comput3AI\",\n  \n  /**\n   * Main action handler\n   * \n   * @param runtime - ElizaOS agent runtime\n   * @param message - Triggering message\n   * @param state - State object\n   * @param options - Additional options\n   * @param callback - Callback for sending response\n   * @returns Success status\n   */\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: Record<string, unknown>,\n    callback: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing STOP_WORKLOAD action\");\n    \n    try {\n      // Create API client\n      logger.debug(\"Creating Comput3AI API client\");\n      const apiClient = createComput3ApiClient(runtime);\n      \n      // Extract stop parameters from message\n      logger.debug(\"Extracting stop parameters from message\");\n      let stopParams: StopWorkloadContent;\n      \n      // Log the entire message content for debugging\n      logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n      \n      if (message.content && typeof message.content === 'object' && 'workload' in message.content && typeof message.content.workload === 'string') {\n        // Parameters were directly provided in structured content\n        stopParams = {\n          workload: message.content.workload,\n          ...message.content\n        };\n        logger.debug(\"Using directly provided workload ID:\", stopParams.workload);\n      } else if (message.content && typeof message.content === 'object' && 'text' in message.content && typeof message.content.text === 'string') {\n        // Need to extract parameters from text\n        logger.debug(\"Attempting to extract workload ID from text:\", message.content.text);\n        \n        // First try direct text extraction before using LLM\n        const extractedParams = validateStopWorkloadFromText(message.content.text);\n        \n        if (extractedParams) {\n          logger.debug(\"Direct text extraction successful:\", extractedParams);\n          stopParams = extractedParams;\n        } else {\n          // If direct extraction fails, use LLM\n          const prompt = composePrompt({\n            template: stopWorkloadTemplate,\n            state: { recentMessages: formatRecentMessages(state) },\n          });\n          \n          logger.debug(\"Extracting workload ID using LLM\");\n          const result = await runtime.useModel(ModelType.TEXT_SMALL, {\n            prompt,\n          });\n          \n          logger.debug(\"LLM extraction result:\", result);\n          stopParams = parseJSONObjectFromText(result) as StopWorkloadContent;\n          \n          if (!isStopWorkloadContent(stopParams)) {\n            logger.error(\"LLM extraction failed to produce valid workload ID\");\n            \n            callback({\n              text: \"Failed to identify a workload ID to stop. Please provide a specific workload ID like '7b69314d-c88d-47d9-920c-ae827f6b7844' or 'name-name-name-gpu.comput3.ai'.\",\n              content: { \n                success: false, \n                error: \"Could not extract workload ID\" \n              },\n            });\n            \n            return false;\n          }\n        }\n      } else {\n        // No valid content found\n        const errorMessage = \"No valid message content to extract workload ID from\";\n        logger.error(`STOP_WORKLOAD failed: ${errorMessage}`);\n        \n        callback({\n          text: `Failed to stop workload: ${errorMessage}. Please specify a valid workload ID (either UUID format like \"7b69314d-c88d-47d9-920c-ae827f6b7844\" or domain format like \"name-name-name-gpu.comput3.ai\").`,\n          content: { \n            success: false, \n            error: errorMessage \n          },\n        });\n        \n        return false;\n      }\n      \n      // Validate parameters\n      if (!isStopWorkloadContent(stopParams)) {\n        const errorMessage = ERROR_MESSAGES.INVALID_WORKLOAD_ID || \"Invalid workload ID\";\n        logger.error(`STOP_WORKLOAD failed: ${errorMessage}`);\n        \n        callback({\n          text: `Failed to stop workload: ${errorMessage}. Please specify a valid workload ID (either UUID format like \"7b69314d-c88d-47d9-920c-ae827f6b7844\" or domain format like \"name-name-name-gpu.comput3.ai\").`,\n          content: { \n            success: false, \n            error: errorMessage \n          },\n        });\n        \n        return false;\n      }\n      \n      // Prepare stop request\n      const request: StopWorkloadRequest = {\n        workload: stopParams.workload,\n      };\n      \n      logger.debug(\"Stopping workload with ID:\", stopParams.workload);\n      logger.debug(\"Full stop request parameters:\", request);\n      \n      // Initial response to user confirming which workload is being stopped\n      callback({\n        text: `Stopping your workload with ID '${stopParams.workload}' now...`,\n        content: { \n          processing: true,\n          workload: stopParams.workload\n        },\n      });\n      \n      // Stop workload\n      const response = await apiClient.stopWorkload(request);\n      \n      // Check for success\n      if (!response.success || !response.data) {\n        const errorMessage = response.error || \"Failed to stop workload\";\n        logger.error(`STOP_WORKLOAD failed: ${errorMessage}`);\n        logger.debug(\"Full error response:\", JSON.stringify(response, null, 2));\n        \n        let userMessage = `Failed to stop workload ${stopParams.workload}: ${errorMessage}`;\n        \n        // Add more helpful context for 502 errors\n        if (response.statusCode === 502) {\n          userMessage = `Failed to stop workload ${stopParams.workload}: Server error (502 Bad Gateway). The Comput3AI service is currently experiencing issues. Please try again later or contact Comput3AI support if the problem persists.`;\n        }\n        \n        callback({\n          text: userMessage,\n          content: { \n            success: false, \n            error: errorMessage,\n            statusCode: response.statusCode,\n            workload: stopParams.workload\n          },\n        });\n        \n        return false;\n      }\n      \n      // Process successful response\n      const stopResponse = response.data;\n      logger.info(`Successfully stopped workload: ${stopParams.workload}`);\n      logger.debug(\"Stop response:\", stopResponse);\n      \n      // Format user-friendly response\n      const formattedResponse = formatStopResponse(stopResponse, request);\n      \n      callback({\n        text: formattedResponse,\n        content: { \n          success: true, \n          data: stopResponse,\n          request: request,\n          workload: stopParams.workload\n        },\n      });\n      \n      return true;\n    } catch (error) {\n      // Handle unexpected errors\n      const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n      logger.error(`STOP_WORKLOAD error: ${errorMessage}`);\n      \n      if (error instanceof Error && error.stack) {\n        logger.debug(`Error stack: ${error.stack}`);\n      }\n      \n      // Try to log more details about the error\n      if (typeof error === 'object' && error !== null) {\n        try {\n          logger.debug(\"Error details:\", JSON.stringify(error, Object.getOwnPropertyNames(error), 2));\n        } catch (e) {\n          logger.debug(\"Could not stringify full error object\");\n        }\n      }\n      \n      // Check for 502 errors in the catch block too\n      let userMessage = `Failed to stop workload: ${errorMessage}`;\n      if (errorMessage.includes(\"502\") || errorMessage.includes(\"Bad Gateway\")) {\n        userMessage = 'Failed to stop workload: Server error (502 Bad Gateway). The Comput3AI service is currently experiencing issues. Please try again later or contact Comput3AI support if the problem persists.';\n      }\n      \n      callback({\n        text: userMessage,\n        content: { \n          success: false, \n          error: errorMessage \n        },\n      });\n      \n      return false;\n    }\n  },\n  \n  /**\n   * Example conversations for action usage\n   */\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Stop my workload {{workload_id}}\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Stopping your workload with ID '{{workload_id}}' now...\",\n          actions: [\"STOP_WORKLOAD\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Terminate the GPU instance {{workload_domain}}\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Terminating the workload with ID '{{workload_domain}}' now...\",\n          actions: [\"STOP_WORKLOAD\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n\n/**\n * Format recent messages for context in the LLM prompt\n * \n * @param state - State object containing messages\n * @returns Formatted messages string\n */\nfunction formatRecentMessages(state: State): string {\n  const messages = state.messages || [];\n  return messages.slice(-3).map((msg: { role?: string; content: string | { text: string } }) => {\n    if (typeof msg.content === 'string') {\n      return `${msg.role || 'user'}: ${msg.content}`;\n    }\n    if (msg.content && typeof msg.content.text === 'string') {\n      return `${msg.role || 'user'}: ${msg.content.text}`;\n    }\n    return '';\n  }).join('\\n\\n');\n}\n\n/**\n * Format stop response into a user-friendly message\n * \n * @param response - Stop response from API\n * @param request - Original stop request\n * @returns Formatted response message\n */\nfunction formatStopResponse(response: StopWorkloadResponse, request: StopWorkloadRequest): string {\n  const workloadId = request.workload;\n  \n  return [\n    \"Successfully stopped workload!\",\n    \"\",\n    `Workload ID: ${workloadId}`,\n    \"Status: Stopped\",\n  ].join('\\n');\n} ","/**\n * Type definitions for Comput3AI API\n * \n * This file contains all interfaces and types for the API requests and responses.\n */\n\n/**\n * Common API response wrapper\n */\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  statusCode?: number;\n}\n\n/**\n * Available workload types returned by /api/v0/types endpoint\n */\nexport type WorkloadType = \n  | \"media:fast\"\n  | \"ollama_webui:coder\"\n  | \"ollama_webui:fast\"\n  | \"ollama_webui:large\"\n  | string; // Allow for future types\n\n/**\n * User balance information from /api/v0/balance endpoint\n */\nexport interface UserBalance {\n  balance: number;\n}\n\n/**\n * User profile information from /api/v0/profile endpoint\n */\nexport interface UserProfile {\n  addr: string;\n  tags: string[];\n  user_uuid: string;\n}\n\n/**\n * Request payload for launching a workload\n */\nexport interface LaunchWorkloadRequest {\n  /**\n   * Type of workload to launch\n   */\n  type: WorkloadType;\n  \n  /**\n   * Unix timestamp (seconds since epoch) when the workload should expire\n   * In the API, this must be a future timestamp, not a duration\n   */\n  expires: number;\n}\n\n/**\n * Response from launching a workload\n */\nexport interface LaunchWorkloadResponse {\n  node: string;\n  workload: string;\n  workload_key: string;\n}\n\n/**\n * Request payload for stopping a workload\n */\nexport interface StopWorkloadRequest {\n  workload: string;\n}\n\n/**\n * Response from stopping a workload (typically empty)\n */\nexport interface StopWorkloadResponse {\n  // API may return empty response or success indicator\n  success?: boolean;\n}\n\n/**\n * Request payload for listing workloads\n */\nexport interface ListWorkloadsRequest {\n  running?: boolean;\n}\n\n/**\n * Individual workload item in the list response\n */\nexport interface WorkloadItem {\n  created: number;\n  expires: number;\n  node: string;\n  running: boolean;\n  status: string;\n  type: WorkloadType;\n  workload: string;\n}\n\n/**\n * Type guard to check if an object is a valid WorkloadItem\n */\nexport function isWorkloadItem(item: unknown): item is WorkloadItem {\n  return (\n    typeof item === 'object' &&\n    item !== null &&\n    typeof (item as WorkloadItem).workload === 'string' &&\n    typeof (item as WorkloadItem).node === 'string' &&\n    typeof (item as WorkloadItem).running === 'boolean'\n  );\n}\n\n/**\n * Type guard to check if an array contains WorkloadItems\n */\nexport function isWorkloadItemArray(items: unknown[]): items is WorkloadItem[] {\n  return Array.isArray(items) && (items.length === 0 || isWorkloadItem(items[0]))\n}\n","/**\n * Comput3AI plugin for ElizaOS\n * \n * This plugin provides integration with the Comput3AI GPU services API.\n */\nimport type { Plugin, IAgentRuntime } from \"@elizaos/core\";\nimport { logger } from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\n\n// Import actions\nimport { \n  getWorkloadTypesAction,\n  getUserBalanceAction,\n  getUserProfileAction,\n  listWorkloadsAction,\n  launchWorkloadAction,\n  stopWorkloadAction,\n} from \"./actions\";\n\nimport { API_CONFIG } from \"./constants\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Main plugin definition for Comput3AI integration\n */\nexport const comput3aiPlugin: Plugin = {\n  /**\n   * Initialize the plugin\n   * \n   * @param config - Plugin configuration\n   * @param runtime - ElizaOS agent runtime\n   */\n  init: async (config: Record<string, string>, runtime: IAgentRuntime) => {\n    logger.info(\"Initializing Comput3AI plugin\");\n    logger.debug(\"Comput3AI plugin config:\", config);\n    \n    // Validate required environment variables\n    for (const varName of API_CONFIG.REQUIRED_ENV_VARS) {\n      const value = runtime.getSetting(varName) || process.env[varName];\n      if (!value) {\n        logger.error(`Missing required environment variable: ${varName}`);\n      } else {\n        logger.debug(`Found environment variable: ${varName}`);\n      }\n    }\n  },\n  \n  /**\n   * Plugin metadata\n   */\n  name: \"comput3ai\",\n  description: \"Plugin for interacting with Comput3AI GPU services API\",\n  \n  /**\n   * Plugin components\n   */\n  actions: [\n    getWorkloadTypesAction,\n    getUserProfileAction,\n    getUserBalanceAction,\n    listWorkloadsAction,\n    launchWorkloadAction,\n    stopWorkloadAction,\n    // Will add more actions as they are implemented\n  ],\n  providers: [],\n  evaluators: [],\n  services: [],\n  routes: [],\n};\n\n/**\n * Export all actions for external use\n */\nexport * as actions from \"./actions\";\n\n/**\n * Export types for external use\n */\nexport * from \"./types\";\n\n/**\n * Default export\n */\nexport default comput3aiPlugin;\n"]}